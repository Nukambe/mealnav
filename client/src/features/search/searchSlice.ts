import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { getAllMeals, LoadingStatus } from '../meals/mealsSlice';
import { FilterOptions, SortOption, SortOptions } from './searchTypes';
import { stat } from 'fs';

export type SearchState = {
  sortOptions: SortOptions;
  filters: FilterOptions;
  limit: number;
  page: number;
  status: LoadingStatus;
};

export const initialState: SearchState = {
  sortOptions: {
    mostPopular: { current: true, order: 'DESC' },
    bestRating: { current: false, order: 'DESC' },
    newest: { current: false, order: 'DESC' },
    calories: { current: false, order: 'ASC' },
    fat: { current: false, order: 'ASC' },
    protein: { current: false, order: 'ASC' },
    carbs: { current: false, order: 'ASC' },
  },
  filters: {
    prepTime: { min: 0, max: 0 },
    cookTime: { min: 0, max: 0 },
    cookingMethod: [],
    recipeCategory: [],
    recipeCuisine: [],
    suitableForDiet: [],
    recipeIngredient: [],
    calories: { min: 0, max: 0 },
    fat: { min: 0, max: 0 },
    protein: { min: 0, max: 0 },
    carbs: { min: 0, max: 0 },
    sugar: { min: 0, max: 0 },
    fiber: { min: 0, max: 0 },
    cholesterol: { min: 0, max: 0 },
    sodium: { min: 0, max: 0 },
  },
  limit: 10,
  page: 1,
  status: LoadingStatus.loading,
};

export const searchSlice = createSlice({
  name: 'search',
  initialState,

  reducers: {
    setSortOption: (
      state,
      action: PayloadAction<{ sort: keyof SortOptions }>,
    ) => {
      if (state.sortOptions[action.payload.sort].current) {
        const isAscending =
          state.sortOptions[action.payload.sort].order === 'ASC';
        state.sortOptions[action.payload.sort].order = isAscending
          ? 'DESC'
          : 'ASC';
      } else {
        for (const key in state.sortOptions) {
          state.sortOptions[key as keyof SortOptions].current = false;
        }
        state.sortOptions[action.payload.sort].current = true;
      }
    },
    setFilterOption: (
      state,
      action: PayloadAction<{ filter: keyof FilterOptions; checked: boolean }>,
    ) => {
      // state.filters[action.payload.filter] = action.payload.checked;
    },
    setLimit: (state, action: PayloadAction<number>) => {
      state.limit = action.payload;
    },
    setPage: (state, action: PayloadAction<number>) => {
      state.page = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllMeals.pending, (state) => {
        state.status = LoadingStatus.loading;
      })
      .addCase(getAllMeals.fulfilled, (state) => {
        state.status = LoadingStatus.success;
      })
      .addCase(getAllMeals.rejected, (state) => {
        state.status = LoadingStatus.failed;
      });
  },
});

export const { setSortOption, setFilterOption, setLimit, setPage } =
  searchSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectSortOptions = (state: RootState) => state.search.sortOptions;
export const selectFilterOptions = (state: RootState) => state.search.filters;
export const selectLimit = (state: RootState) => state.search.limit;
export const selectPage = (state: RootState) => state.search.page;
export const selectSearchStatus = (state: RootState) => state.search.status;

export default searchSlice.reducer;
